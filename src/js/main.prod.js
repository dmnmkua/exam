(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//  Конструктор кнопки поиска
var BtnSearch = function () {
  function BtnSearch() {
    _classCallCheck(this, BtnSearch);

    // values DOM
    this.btnSearch = document.querySelector('.search__icon');
    this.inputSearch = document.querySelector('.search__input');

    // events
    this._events();
  }

  _createClass(BtnSearch, [{
    key: '_events',
    value: function _events() {
      var _this = this;

      //	show search input
      this.btnSearch.addEventListener('click', function () {
        _this.inputSearch.classList.toggle('search__input--show');
        _this.inputSearch.focus();
      });

      //	usage search input
      this.inputSearch.addEventListener('keydown', function (e) {
        if (e.keyCode === 13) {
          _this.inputSearch.classList.toggle('search__input--show');
          alert(_this.inputSearch.value);
          _this.inputSearch.value = '';
        } else if (e.keyCode === 27) {
          _this.inputSearch.classList.toggle('search__input--show');
          _this.inputSearch.value = '';
        } else if (!e.target) {
          _this.inputSearch.classList.toggle('search__input--show');
        }
      });

      document.body.addEventListener('click', function (e) {
        if (e.target !== _this.inputSearch && e.target !== _this.btnSearch && _this.inputSearch.classList.contains('search__input--show')) {
          _this.inputSearch.classList.remove('search__input--show');
        }
      });
    }
  }]);

  return BtnSearch;
}();

exports.default = BtnSearch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ0blNlYXJjaC5qcyJdLCJuYW1lcyI6WyJCdG5TZWFyY2giLCJidG5TZWFyY2giLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpbnB1dFNlYXJjaCIsIl9ldmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiZm9jdXMiLCJlIiwia2V5Q29kZSIsImFsZXJ0IiwidmFsdWUiLCJ0YXJnZXQiLCJib2R5IiwiY29udGFpbnMiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtJQUNxQkEsUztBQUVwQix1QkFBYztBQUFBOztBQUNiO0FBQ0UsU0FBS0MsU0FBTCxHQUFpQkMsU0FBU0MsYUFBVCxDQUF1QixlQUF2QixDQUFqQjtBQUNBLFNBQUtDLFdBQUwsR0FBbUJGLFNBQVNDLGFBQVQsQ0FBdUIsZ0JBQXZCLENBQW5COztBQUVBO0FBQ0EsU0FBS0UsT0FBTDtBQUNGOzs7OzhCQUdVO0FBQUE7O0FBRVQ7QUFDQyxXQUFLSixTQUFMLENBQWVLLGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDLFlBQU07QUFDN0MsY0FBS0YsV0FBTCxDQUFpQkcsU0FBakIsQ0FBMkJDLE1BQTNCLENBQWtDLHFCQUFsQztBQUNBLGNBQUtKLFdBQUwsQ0FBaUJLLEtBQWpCO0FBQ0QsT0FIRDs7QUFLQTtBQUNBLFdBQUtMLFdBQUwsQ0FBaUJFLGdCQUFqQixDQUFrQyxTQUFsQyxFQUE2QyxhQUFLO0FBQ2hELFlBQUdJLEVBQUVDLE9BQUYsS0FBYyxFQUFqQixFQUFxQjtBQUNuQixnQkFBS1AsV0FBTCxDQUFpQkcsU0FBakIsQ0FBMkJDLE1BQTNCLENBQWtDLHFCQUFsQztBQUNBSSxnQkFBTSxNQUFLUixXQUFMLENBQWlCUyxLQUF2QjtBQUNBLGdCQUFLVCxXQUFMLENBQWlCUyxLQUFqQixHQUF5QixFQUF6QjtBQUNELFNBSkQsTUFLSyxJQUFHSCxFQUFFQyxPQUFGLEtBQWMsRUFBakIsRUFBcUI7QUFDeEIsZ0JBQUtQLFdBQUwsQ0FBaUJHLFNBQWpCLENBQTJCQyxNQUEzQixDQUFrQyxxQkFBbEM7QUFDQSxnQkFBS0osV0FBTCxDQUFpQlMsS0FBakIsR0FBeUIsRUFBekI7QUFDRCxTQUhJLE1BSUEsSUFBRyxDQUFDSCxFQUFFSSxNQUFOLEVBQWM7QUFDakIsZ0JBQUtWLFdBQUwsQ0FBaUJHLFNBQWpCLENBQTJCQyxNQUEzQixDQUFrQyxxQkFBbEM7QUFDRDtBQUNGLE9BYkQ7O0FBZUFOLGVBQVNhLElBQVQsQ0FBY1QsZ0JBQWQsQ0FBK0IsT0FBL0IsRUFBd0MsYUFBSztBQUMzQyxZQUFHSSxFQUFFSSxNQUFGLEtBQWEsTUFBS1YsV0FBbEIsSUFBaUNNLEVBQUVJLE1BQUYsS0FBYSxNQUFLYixTQUFuRCxJQUFnRSxNQUFLRyxXQUFMLENBQWlCRyxTQUFqQixDQUEyQlMsUUFBM0IsQ0FBb0MscUJBQXBDLENBQW5FLEVBQStIO0FBQzdILGdCQUFLWixXQUFMLENBQWlCRyxTQUFqQixDQUEyQlUsTUFBM0IsQ0FBa0MscUJBQWxDO0FBQ0Q7QUFDRixPQUpEO0FBTUQ7Ozs7OztrQkExQ2tCakIsUyIsImZpbGUiOiJidG5TZWFyY2guanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAg0JrQvtC90YHRgtGA0YPQutGC0L7RgCDQutC90L7Qv9C60Lgg0L/QvtC40YHQutCwXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdG5TZWFyY2gge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIHZhbHVlcyBET01cbiAgICB0aGlzLmJ0blNlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2hfX2ljb24nKTtcbiAgICB0aGlzLmlucHV0U2VhcmNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaF9faW5wdXQnKTtcblxuICAgIC8vIGV2ZW50c1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXHR9XG5cblxuICBfZXZlbnRzKCkge1xuXG4gIFx0Ly9cdHNob3cgc2VhcmNoIGlucHV0XG4gICAgdGhpcy5idG5TZWFyY2guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmlucHV0U2VhcmNoLmNsYXNzTGlzdC50b2dnbGUoJ3NlYXJjaF9faW5wdXQtLXNob3cnKTtcbiAgICAgIHRoaXMuaW5wdXRTZWFyY2guZm9jdXMoKTtcbiAgICB9KTtcblxuICAgIC8vXHR1c2FnZSBzZWFyY2ggaW5wdXRcbiAgICB0aGlzLmlucHV0U2VhcmNoLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcbiAgICAgIGlmKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgdGhpcy5pbnB1dFNlYXJjaC5jbGFzc0xpc3QudG9nZ2xlKCdzZWFyY2hfX2lucHV0LS1zaG93Jyk7XG4gICAgICAgIGFsZXJ0KHRoaXMuaW5wdXRTZWFyY2gudmFsdWUpO1xuICAgICAgICB0aGlzLmlucHV0U2VhcmNoLnZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgICAgdGhpcy5pbnB1dFNlYXJjaC5jbGFzc0xpc3QudG9nZ2xlKCdzZWFyY2hfX2lucHV0LS1zaG93Jyk7XG4gICAgICAgIHRoaXMuaW5wdXRTZWFyY2gudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoIWUudGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuaW5wdXRTZWFyY2guY2xhc3NMaXN0LnRvZ2dsZSgnc2VhcmNoX19pbnB1dC0tc2hvdycpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgaWYoZS50YXJnZXQgIT09IHRoaXMuaW5wdXRTZWFyY2ggJiYgZS50YXJnZXQgIT09IHRoaXMuYnRuU2VhcmNoICYmIHRoaXMuaW5wdXRTZWFyY2guY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWFyY2hfX2lucHV0LS1zaG93JykpIHtcbiAgICAgICAgdGhpcy5pbnB1dFNlYXJjaC5jbGFzc0xpc3QucmVtb3ZlKCdzZWFyY2hfX2lucHV0LS1zaG93Jyk7XG4gICAgICB9XG4gICAgfSlcblxuICB9XG59Il19
},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Form = function () {
  function Form() {
    _classCallCheck(this, Form);

    this.btnSignIn = document.querySelector('.btn--sign-in');
    this.navLinkSignIn = document.querySelector('.nav__link--sign-in');
    this.formSignIn = document.querySelector('.form--sign-in');
    this.btnSignUp = document.querySelector('.btn--sign-up');
    this.navLinkSignUp = document.querySelector('.nav__link--sign-up');
    this.formSignUp = document.querySelector('.form--sign-up');
    this.input = document.querySelectorAll('.input');
    this.inputText = document.querySelectorAll('.input-text');
    this.overlay = document.querySelector('.overlay');
    this.closeSignIn = document.querySelector('#close__sign-in');
    this.closeSignUp = document.querySelector('#close__sign-up');

    this._events();
  }

  _createClass(Form, [{
    key: '_events',
    value: function _events() {
      var _this = this;

      this.btnSignIn.addEventListener('click', function () {
        _this.formSignIn.classList.add('form--sign-in-show');
        _this.overlay.classList.add('overlay--show');
      });

      this.navLinkSignIn.addEventListener('click', function (e) {
        e.preventDefault();
        _this.formSignIn.classList.add('form--sign-in-show');
        _this.overlay.classList.add('overlay--show');
      });

      this.btnSignUp.addEventListener('click', function () {
        _this.formSignUp.classList.add('form--sign-up-show');
        _this.overlay.classList.add('overlay--show');
      });

      this.navLinkSignUp.addEventListener('click', function (e) {
        e.preventDefault();
        _this.formSignUp.classList.add('form--sign-up-show');
        _this.overlay.classList.add('overlay--show');
      });

      this.overlay.addEventListener('click', function () {
        if (_this.formSignIn.classList.contains('form--sign-in-show')) {
          _this.formSignIn.classList.remove('form--sign-in-show');
        };
        if (_this.formSignUp.classList.contains('form--sign-up-show')) {
          _this.formSignUp.classList.remove('form--sign-up-show');
        };
      });

      this.closeSignIn.addEventListener('click', function (e) {
        e.preventDefault();
        _this.formSignIn.classList.remove('form--sign-in-show');
        _this.overlay.classList.remove('overlay--show');
      });

      this.closeSignUp.addEventListener('click', function (e) {
        e.preventDefault();
        _this.formSignUp.classList.remove('form--sign-up-show');
        _this.overlay.classList.remove('overlay--show');
      });

      var _loop = function _loop(i) {
        //  Если поле в фокусе, плейсхолдер уходит вверх
        _this.input[i].addEventListener('focus', function () {
          _this.inputText[i].classList.add('login-text--full');
        });

        //  Если поле пустое, плейсхолдер возвращается обратно
        _this.input[i].addEventListener('blur', function () {
          if (_this.input[i].value === "") {
            _this.inputText[i].classList.remove('login-text--full');
          }
        });
      };

      for (var i = 0; i < this.input.length; i++) {
        _loop(i);
      }
    }
  }]);

  return Form;
}();

exports.default = Form;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1zLmpzIl0sIm5hbWVzIjpbIkZvcm0iLCJidG5TaWduSW4iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJuYXZMaW5rU2lnbkluIiwiZm9ybVNpZ25JbiIsImJ0blNpZ25VcCIsIm5hdkxpbmtTaWduVXAiLCJmb3JtU2lnblVwIiwiaW5wdXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRUZXh0Iiwib3ZlcmxheSIsImNsb3NlU2lnbkluIiwiY2xvc2VTaWduVXAiLCJfZXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwiaSIsInZhbHVlIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCQSxJO0FBRW5CLGtCQUFjO0FBQUE7O0FBQ1osU0FBS0MsU0FBTCxHQUFpQkMsU0FBU0MsYUFBVCxDQUF1QixlQUF2QixDQUFqQjtBQUNBLFNBQUtDLGFBQUwsR0FBcUJGLFNBQVNDLGFBQVQsQ0FBdUIscUJBQXZCLENBQXJCO0FBQ0EsU0FBS0UsVUFBTCxHQUFrQkgsU0FBU0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBbEI7QUFDQSxTQUFLRyxTQUFMLEdBQWlCSixTQUFTQyxhQUFULENBQXVCLGVBQXZCLENBQWpCO0FBQ0EsU0FBS0ksYUFBTCxHQUFxQkwsU0FBU0MsYUFBVCxDQUF1QixxQkFBdkIsQ0FBckI7QUFDQSxTQUFLSyxVQUFMLEdBQWtCTixTQUFTQyxhQUFULENBQXVCLGdCQUF2QixDQUFsQjtBQUNBLFNBQUtNLEtBQUwsR0FBYVAsU0FBU1EsZ0JBQVQsQ0FBMEIsUUFBMUIsQ0FBYjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJULFNBQVNRLGdCQUFULENBQTBCLGFBQTFCLENBQWpCO0FBQ0EsU0FBS0UsT0FBTCxHQUFlVixTQUFTQyxhQUFULENBQXVCLFVBQXZCLENBQWY7QUFDRixTQUFLVSxXQUFMLEdBQW1CWCxTQUFTQyxhQUFU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QVgsRUFBY0MsS0FBZCxLQUF3QixFQUEzQixFQUErQjtBQUM3QixrQkFBS2IsU0FBTCxDQUFlWSxDQUFmLEVBQWtCTixTQUFsQixDQUE0QkssTUFBNUIsQ0FBbUMsa0JBQW5DO0FBQ0Q7QUFDRixTQUpEO0FBcERNOztBQTZDUixXQUFJLElBQUlDLElBQUksQ0FBWixFQUFlQSxJQUFJLEtBQUtkLEtBQUwsQ0FBV2dCLE1BQTlCLEVBQXNDRixHQUF0QyxFQUEyQztBQUFBLGNBQW5DQSxDQUFtQztBQWExQztBQUVGOzs7Ozs7a0JBaEZrQnZCLEkiLCJmaWxlIjoiZm9ybXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJ0blNpZ25JbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idG4tLXNpZ24taW4nKTtcbiAgICB0aGlzLm5hdkxpbmtTaWduSW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X19saW5rLS1zaWduLWluJyk7XG4gICAgdGhpcy5mb3JtU2lnbkluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0tLXNpZ24taW4nKTtcbiAgICB0aGlzLmJ0blNpZ25VcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idG4tLXNpZ24tdXAnKTtcbiAgICB0aGlzLm5hdkxpbmtTaWduVXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X19saW5rLS1zaWduLXVwJyk7XG4gICAgdGhpcy5mb3JtU2lnblVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0tLXNpZ24tdXAnKTtcbiAgICB0aGlzLmlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0Jyk7XG4gICAgdGhpcy5pbnB1dFRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtdGV4dCcpO1xuICAgIHRoaXMub3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdmVybGF5Jyk7XG5cdFx0dGhpcy5jbG9zZVNpZ25JbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbG9zZV9fc2lnbi1pbicpO1xuXHRcdHRoaXMuY2xvc2VTaWduVXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xvc2VfX3NpZ24tdXAnKTtcblxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuXG4gIF9ldmVudHMoKSB7XG4gICAgICB0aGlzLmJ0blNpZ25Jbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5mb3JtU2lnbkluLmNsYXNzTGlzdC5hZGQoJ2Zvcm0tLXNpZ24taW4tc2hvdycpO1xuICAgICAgICB0aGlzLm92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnb3ZlcmxheS0tc2hvdycpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMubmF2TGlua1NpZ25Jbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuZm9ybVNpZ25Jbi5jbGFzc0xpc3QuYWRkKCdmb3JtLS1zaWduLWluLXNob3cnKTtcbiAgICAgICAgdGhpcy5vdmVybGF5LmNsYXNzTGlzdC5hZGQoJ292ZXJsYXktLXNob3cnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmJ0blNpZ25VcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5mb3JtU2lnblVwLmNsYXNzTGlzdC5hZGQoJ2Zvcm0tLXNpZ24tdXAtc2hvdycpO1xuICAgICAgICB0aGlzLm92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnb3ZlcmxheS0tc2hvdycpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMubmF2TGlua1NpZ25VcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuZm9ybVNpZ25VcC5jbGFzc0xpc3QuYWRkKCdmb3JtLS1zaWduLXVwLXNob3cnKTtcbiAgICAgICAgdGhpcy5vdmVybGF5LmNsYXNzTGlzdC5hZGQoJ292ZXJsYXktLXNob3cnKTtcbiAgICAgIH0pO1xuXG5cbiAgICB0aGlzLm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZih0aGlzLmZvcm1TaWduSW4uY2xhc3NMaXN0LmNvbnRhaW5zKCdmb3JtLS1zaWduLWluLXNob3cnKSkge1xuICAgICAgICB0aGlzLmZvcm1TaWduSW4uY2xhc3NMaXN0LnJlbW92ZSgnZm9ybS0tc2lnbi1pbi1zaG93Jyk7XG4gICAgICB9O1xuICAgICAgaWYodGhpcy5mb3JtU2lnblVwLmNsYXNzTGlzdC5jb250YWlucygnZm9ybS0tc2lnbi11cC1zaG93JykpIHtcbiAgICAgICAgdGhpcy5mb3JtU2lnblVwLmNsYXNzTGlzdC5yZW1vdmUoJ2Zvcm0tLXNpZ24tdXAtc2hvdycpO1xuICAgICAgfTtcbiAgICB9KTtcblxuXHRcdHRoaXMuY2xvc2VTaWduSW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHRoaXMuZm9ybVNpZ25Jbi5jbGFzc0xpc3QucmVtb3ZlKCdmb3JtLS1zaWduLWluLXNob3cnKTtcblx0XHRcdHRoaXMub3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCdvdmVybGF5LS1zaG93Jyk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmNsb3NlU2lnblVwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLmZvcm1TaWduVXAuY2xhc3NMaXN0LnJlbW92ZSgnZm9ybS0tc2lnbi11cC1zaG93Jyk7XG5cdFx0XHR0aGlzLm92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmxheS0tc2hvdycpO1xuXHRcdH0pO1xuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICDQldGB0LvQuCDQv9C+0LvQtSDQsiDRhNC+0LrRg9GB0LUsINC/0LvQtdC50YHRhdC+0LvQtNC10YAg0YPRhdC+0LTQuNGCINCy0LLQtdGA0YVcbiAgICAgIHRoaXMuaW5wdXRbaV0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaW5wdXRUZXh0W2ldLmNsYXNzTGlzdC5hZGQoJ2xvZ2luLXRleHQtLWZ1bGwnKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyAg0JXRgdC70Lgg0L/QvtC70LUg0L/Rg9GB0YLQvtC1LCDQv9C70LXQudGB0YXQvtC70LTQtdGAINCy0L7Qt9Cy0YDQsNGJ0LDQtdGC0YHRjyDQvtCx0YDQsNGC0L3QvlxuICAgICAgdGhpcy5pbnB1dFtpXS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgICBpZih0aGlzLmlucHV0W2ldLnZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dFRleHRbaV0uY2xhc3NMaXN0LnJlbW92ZSgnbG9naW4tdGV4dC0tZnVsbCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIH1cblxuICB9XG59XG4iXX0=
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//  Конструктор открытия меню
var Menu = function () {
  function Menu() {
    _classCallCheck(this, Menu);

    // values DOM
    this.menuBtn = document.querySelector('.nav__btn');
    this.menuList = document.querySelector('.nav__list');
    this.overlay = document.querySelector('.overlay');

    //  events
    this._events();
  }

  _createClass(Menu, [{
    key: '_events',
    value: function _events() {
      var _this = this;

      // Открытие меню по клику на кнопку меню
      this.menuBtn.addEventListener('click', function () {
        _this.menuList.classList.add('nav__list--show');
        _this.overlay.classList.add('overlay--show');
      });

      // Скрытие меню и оверфлоу по клику на оверфлоу
      this.overlay.addEventListener('click', function () {
        _this.menuList.classList.remove('nav__list--show');
        _this.overlay.classList.remove('overlay--show');
      });

      // Скрытие меню и оверфлоу по клику на пункт меню
      this.menuList.addEventListener('click', function (e) {
        if (e.target.tagName === 'A' && e.target.classList.contains('nav__link--trs')) {
          _this.menuList.classList.remove('nav__list--show');
          _this.overlay.classList.remove('overlay--show');
        };
        if (e.target.tagName === 'A' && (e.target.classList.contains('nav__link--sign-in') || e.target.classList.contains('nav__link--sign-up'))) {
          _this.menuList.classList.remove('nav__list--show');
        };
      });
    }
  }]);

  return Menu;
}();

exports.default = Menu;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUuanMiXSwibmFtZXMiOlsiTWVudSIsIm1lbnVCdG4iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJtZW51TGlzdCIsIm92ZXJsYXkiLCJfZXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImUiLCJ0YXJnZXQiLCJ0YWdOYW1lIiwiY29udGFpbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtJQUNxQkEsSTtBQUVuQixrQkFBYztBQUFBOztBQUVaO0FBQ0EsU0FBS0MsT0FBTCxHQUFlQyxTQUFTQyxhQUFULENBQXVCLFdBQXZCLENBQWY7QUFDQSxTQUFLQyxRQUFMLEdBQWdCRixTQUFTQyxhQUFULENBQXVCLFlBQXZCLENBQWhCO0FBQ0EsU0FBS0UsT0FBTCxHQUFlSCxTQUFTQyxhQUFULENBQXVCLFVBQXZCLENBQWY7O0FBRUE7QUFDQSxTQUFLRyxPQUFMO0FBQ0Q7Ozs7OEJBRVM7QUFBQTs7QUFDUjtBQUNBLFdBQUtMLE9BQUwsQ0FBYU0sZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsWUFBTTtBQUMzQyxjQUFLSCxRQUFMLENBQWNJLFNBQWQsQ0FBd0JDLEdBQXhCLENBQTRCLGlCQUE1QjtBQUNBLGNBQUtKLE9BQUwsQ0FBYUcsU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsZUFBM0I7QUFDRCxPQUhEOztBQUtBO0FBQ0EsV0FBS0osT0FBTCxDQUFhRSxnQkFBYixDQUE4QixPQUE5QixFQUF1QyxZQUFNO0FBQzNDLGNBQUtILFFBQUwsQ0FBY0ksU0FBZCxDQUF3QkUsTUFBeEIsQ0FBK0IsaUJBQS9CO0FBQ0EsY0FBS0wsT0FBTCxDQUFhRyxTQUFiLENBQXVCRSxNQUF2QixDQUE4QixlQUE5QjtBQUNELE9BSEQ7O0FBS0E7QUFDQSxXQUFLTixRQUFMLENBQWNHLGdCQUFkLENBQStCLE9BQS9CLEVBQXdDLGFBQUs7QUFDM0MsWUFBR0ksRUFBRUMsTUFBRixDQUFTQyxPQUFULEtBQXFCLEdBQXJCLElBQTRCRixFQUFFQyxNQUFGLENBQVNKLFNBQVQsQ0FBbUJNLFFBQW5CLENBQTRCLGdCQUE1QixDQUEvQixFQUE4RTtBQUM1RSxnQkFBS1YsUUFBTCxDQUFjSSxTQUFkLENBQXdCRSxNQUF4QixDQUErQixpQkFBL0I7QUFDQSxnQkFBS0wsT0FBTCxDQUFhRyxTQUFiLENBQXVCRSxNQUF2QixDQUE4QixlQUE5QjtBQUNEO0FBQ0QsWUFBR0MsRUFBRUMsTUFBRixDQUFTQyxPQUFULEtBQXFCLEdBQXJCLEtBQTZCRixFQUFFQyxNQUFGLENBQVNKLFNBQVQsQ0FBbUJNLFFBQW5CLENBQTRCLG9CQUE1QixLQUFxREgsRUFBRUMsTUFBRixDQUFTSixTQUFULENBQW1CTSxRQUFuQixDQUE0QixvQkFBNUIsQ0FBbEYsQ0FBSCxFQUF5STtBQUN2SSxnQkFBS1YsUUFBTCxDQUFjSSxTQUFkLENBQXdCRSxNQUF4QixDQUErQixpQkFBL0I7QUFDRDtBQUVGLE9BVEQ7QUFVRDs7Ozs7O2tCQXJDa0JWLEk7QUFzQ3BCIiwiZmlsZSI6Im1lbnUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAg0JrQvtC90YHRgtGA0YPQutGC0L7RgCDQvtGC0LrRgNGL0YLQuNGPINC80LXQvdGOXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW51IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIC8vIHZhbHVlcyBET01cbiAgICB0aGlzLm1lbnVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X19idG4nKTtcbiAgICB0aGlzLm1lbnVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdl9fbGlzdCcpO1xuICAgIHRoaXMub3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdmVybGF5Jyk7XG5cbiAgICAvLyAgZXZlbnRzXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICBfZXZlbnRzKCkge1xuICAgIC8vINCe0YLQutGA0YvRgtC40LUg0LzQtdC90Y4g0L/QviDQutC70LjQutGDINC90LAg0LrQvdC+0L/QutGDINC80LXQvdGOXG4gICAgdGhpcy5tZW51QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5tZW51TGlzdC5jbGFzc0xpc3QuYWRkKCduYXZfX2xpc3QtLXNob3cnKTtcbiAgICAgIHRoaXMub3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdvdmVybGF5LS1zaG93Jyk7XG4gICAgfSk7XG5cbiAgICAvLyDQodC60YDRi9GC0LjQtSDQvNC10L3RjiDQuCDQvtCy0LXRgNGE0LvQvtGDINC/0L4g0LrQu9C40LrRgyDQvdCwINC+0LLQtdGA0YTQu9C+0YNcbiAgICB0aGlzLm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLm1lbnVMaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ25hdl9fbGlzdC0tc2hvdycpO1xuICAgICAgdGhpcy5vdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ292ZXJsYXktLXNob3cnKTtcbiAgICB9KTtcblxuICAgIC8vINCh0LrRgNGL0YLQuNC1INC80LXQvdGOINC4INC+0LLQtdGA0YTQu9C+0YMg0L/QviDQutC70LjQutGDINC90LAg0L/Rg9C90LrRgiDQvNC10L3RjlxuICAgIHRoaXMubWVudUxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgIGlmKGUudGFyZ2V0LnRhZ05hbWUgPT09ICdBJyAmJiBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ25hdl9fbGluay0tdHJzJykpIHtcbiAgICAgICAgdGhpcy5tZW51TGlzdC5jbGFzc0xpc3QucmVtb3ZlKCduYXZfX2xpc3QtLXNob3cnKTtcbiAgICAgICAgdGhpcy5vdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ292ZXJsYXktLXNob3cnKTtcbiAgICAgIH07XG4gICAgICBpZihlLnRhcmdldC50YWdOYW1lID09PSAnQScgJiYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbmF2X19saW5rLS1zaWduLWluJykgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCduYXZfX2xpbmstLXNpZ24tdXAnKSkpIHtcbiAgICAgICAgdGhpcy5tZW51TGlzdC5jbGFzc0xpc3QucmVtb3ZlKCduYXZfX2xpc3QtLXNob3cnKTtcbiAgICAgIH07XG5cbiAgICB9KTtcbiAgfTtcbn07XG4iXX0=
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//  Конструктор второго слайдера
var SliderSecond = function () {
  function SliderSecond() {
    _classCallCheck(this, SliderSecond);

    // values 
    this.btnPrev = document.querySelector('.slider-left__btn');
    this.btnNext = document.querySelector('.slider-right__btn');
    this.leftSliderItem = document.querySelectorAll('.slider-left__item');
    this.rightSliderItem = document.querySelectorAll('.slider-right__item');
    this.navList = document.querySelector('.third-section-nav__list');
    this.navItem = document.querySelectorAll('.third-section-nav__item');
    this.count = 0;

    //  Запускаем функцию слайдера
    this._toggleSlider();

    //  События
    this._events();
  }

  _createClass(SliderSecond, [{
    key: '_toggleSlider',
    value: function _toggleSlider() {
      //  Удаляем активный класс у всех ссылок
      for (var j = 0; j < this.navItem.length; j++) {
        this.navItem[j].children[0].classList.remove('third-section-nav__link--active');
      }
      //  Смещаем слайды
      for (var i = 0; i < this.leftSliderItem.length; i++) {
        this.leftSliderItem[i].style.transform = 'translateX(' + this.count % this.leftSliderItem.length * -100 + '%)';
        this.rightSliderItem[i].style.transform = 'translateX(' + this.count % this.leftSliderItem.length * 100 + '%)';
        this.navItem[this.count].children[0].classList.add('third-section-nav__link--active');
      }
    }
  }, {
    key: '_events',
    value: function _events() {
      var _this = this;

      //  Перемещение слайда по клику вперед
      this.btnNext.addEventListener('click', function () {
        if (_this.count < _this.leftSliderItem.length - 1) {
          _this.count++;
          _this._toggleSlider();
        }
      });

      //  Перемещение слайда по клику назад
      this.btnPrev.addEventListener('click', function () {
        if (_this.count > 0) {
          _this.count--;
          _this._toggleSlider();
        }
      });

      //  Перемещение по слайдеру кнопками меню
      this.navList.addEventListener('click', function (e) {
        if (e.target.tagName === 'A') {
          event.preventDefault();
          for (var i = 0; i < _this.navItem.length; i++) {
            if (e.target.parentNode === _this.navItem[i]) {
              _this.count = i;
              _this._toggleSlider();
            }
          }
        }
      });
    }
  }]);

  return SliderSecond;
}();

exports.default = SliderSecond;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlY29uZFNsaWRlci5qcyJdLCJuYW1lcyI6WyJTbGlkZXJTZWNvbmQiLCJidG5QcmV2IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYnRuTmV4dCIsImxlZnRTbGlkZXJJdGVtIiwicXVlcnlTZWxlY3RvckFsbCIsInJpZ2h0U2xpZGVySXRlbSIsIm5hdkxpc3QiLCJuYXZJdGVtIiwiY291bnQiLCJfdG9nZ2xlU2xpZGVyIiwiX2V2ZW50cyIsImoiLCJsZW5ndGgiLCJjaGlsZHJlbiIsImNsYXNzTGlzdCIsInJlbW92ZSIsImkiLCJzdHlsZSIsInRyYW5zZm9ybSIsImFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwidGFnTmFtZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJwYXJlbnROb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7SUFDcUJBLFk7QUFFbkIsMEJBQWM7QUFBQTs7QUFDWjtBQUNBLFNBQUtDLE9BQUwsR0FBZUMsU0FBU0MsYUFBVCxDQUF1QixtQkFBdkIsQ0FBZjtBQUNBLFNBQUtDLE9BQUwsR0FBZUYsU0FBU0MsYUFBVCxDQUF1QixvQkFBdkIsQ0FBZjtBQUNBLFNBQUtFLGNBQUwsR0FBc0JILFNBQVNJLGdCQUFULENBQTBCLG9CQUExQixDQUF0QjtBQUNBLFNBQUtDLGVBQUwsR0FBdUJMLFNBQVNJLGdCQUFULENBQTBCLHFCQUExQixDQUF2QjtBQUNBLFNBQUtFLE9BQUwsR0FBZU4sU0FBU0MsYUFBVCxDQUF1QiwwQkFBdkIsQ0FBZjtBQUNBLFNBQUtNLE9BQUwsR0FBZVAsU0FBU0ksZ0JBQVQsQ0FBMEIsMEJBQTFCLENBQWY7QUFDQSxTQUFLSSxLQUFMLEdBQWEsQ0FBYjs7QUFFQTtBQUNBLFNBQUtDLGFBQUw7O0FBRUE7QUFDQSxTQUFLQyxPQUFMO0FBQ0Q7Ozs7b0NBR2U7QUFDZDtBQUNBLFdBQUksSUFBSUMsSUFBSSxDQUFaLEVBQWVBLElBQUksS0FBS0osT0FBTCxDQUFhSyxNQUFoQyxFQUF3Q0QsR0FBeEMsRUFBNkM7QUFDM0MsYUFBS0osT0FBTCxDQUFhSSxDQUFiLEVBQWdCRSxRQUFoQixDQUF5QixDQUF6QixFQUE0QkMsU0FBNUIsQ0FBc0NDLE1BQXRDLENBQTZDLGlDQUE3QztBQUNEO0FBQ0Q7QUFDQSxXQUFJLElBQUlDLElBQUksQ0FBWixFQUFlQSxJQUFJLEtBQUtiLGNBQUwsQ0FBb0JTLE1BQXZDLEVBQStDSSxHQUEvQyxFQUFvRDtBQUNsRCxhQUFLYixjQUFMLENBQW9CYSxDQUFwQixFQUF1QkMsS0FBdkIsQ0FBNkJDLFNBQTdCLG1CQUF1RCxLQUFLVixLQUFMLEdBQWEsS0FBS0wsY0FBTCxDQUFvQlMsTUFBakMsR0FBMEMsQ0FBQyxHQUFsRztBQUNBLGFBQUtQLGVBQUwsQ0FBcUJXLENBQXJCLEVBQXdCQyxLQUF4QixDQUE4QkMsU0FBOUIsbUJBQXdELEtBQUtWLEtBQUwsR0FBYSxLQUFLTCxjQUFMLENBQW9CUyxNQUFqQyxHQUEwQyxHQUFsRztBQUNBLGFBQUtMLE9BQUwsQ0FBYSxLQUFLQyxLQUFsQixFQUF5QkssUUFBekIsQ0FBa0MsQ0FBbEMsRUFBcUNDLFNBQXJDLENBQStDSyxHQUEvQyxDQUFtRCxpQ0FBbkQ7QUFDRDtBQUNGOzs7OEJBRVM7QUFBQTs7QUFFUjtBQUNBLFdBQUtqQixPQUFMLENBQWFrQixnQkFBYixDQUE4QixPQUE5QixFQUF1QyxZQUFNO0FBQzNDLFlBQUcsTUFBS1osS0FBTCxHQUFhLE1BQUtMLGNBQUwsQ0FBb0JTLE1BQXBCLEdBQTZCLENBQTdDLEVBQWdEO0FBQzlDLGdCQUFLSixLQUFMO0FBQ0EsZ0JBQUtDLGFBQUw7QUFDRDtBQUNGLE9BTEQ7O0FBT0E7QUFDQSxXQUFLVixPQUFMLENBQWFxQixnQkFBYixDQUE4QixPQUE5QixFQUF1QyxZQUFNO0FBQzNDLFlBQUcsTUFBS1osS0FBTCxHQUFhLENBQWhCLEVBQW1CO0FBQ2pCLGdCQUFLQSxLQUFMO0FBQ0EsZ0JBQUtDLGFBQUw7QUFDRDtBQUNGLE9BTEQ7O0FBT0E7QUFDQSxXQUFLSCxPQUFMLENBQWFjLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLGFBQUs7QUFDMUMsWUFBR0MsRUFBRUMsTUFBRixDQUFTQyxPQUFULEtBQXFCLEdBQXhCLEVBQTZCO0FBQzNCQyxnQkFBTUMsY0FBTjtBQUNBLGVBQUksSUFBSVQsSUFBSSxDQUFaLEVBQWVBLElBQUksTUFBS1QsT0FBTCxDQUFhSyxNQUFoQyxFQUF3Q0ksR0FBeEMsRUFBNkM7QUFDM0MsZ0JBQUdLLEVBQUVDLE1BQUYsQ0FBU0ksVUFBVCxLQUF3QixNQUFLbkIsT0FBTCxDQUFhUyxDQUFiLENBQTNCLEVBQTRDO0FBQzFDLG9CQUFLUixLQUFMLEdBQWFRLENBQWI7QUFDQSxvQkFBS1AsYUFBTDtBQUNEO0FBQ0Y7QUFDRjtBQUNGLE9BVkQ7QUFXRDs7Ozs7O2tCQS9Ea0JYLFkiLCJmaWxlIjoic2Vjb25kU2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gINCa0L7QvdGB0YLRgNGD0LrRgtC+0YAg0LLRgtC+0YDQvtCz0L4g0YHQu9Cw0LnQtNC10YDQsFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyU2Vjb25kIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyB2YWx1ZXMgXG4gICAgdGhpcy5idG5QcmV2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlci1sZWZ0X19idG4nKTtcbiAgICB0aGlzLmJ0bk5leHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLXJpZ2h0X19idG4nKTtcbiAgICB0aGlzLmxlZnRTbGlkZXJJdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci1sZWZ0X19pdGVtJyk7XG4gICAgdGhpcy5yaWdodFNsaWRlckl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyLXJpZ2h0X19pdGVtJyk7XG4gICAgdGhpcy5uYXZMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRoaXJkLXNlY3Rpb24tbmF2X19saXN0Jyk7XG4gICAgdGhpcy5uYXZJdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRoaXJkLXNlY3Rpb24tbmF2X19pdGVtJyk7XG4gICAgdGhpcy5jb3VudCA9IDA7ICAgICAgXG5cbiAgICAvLyAg0JfQsNC/0YPRgdC60LDQtdC8INGE0YPQvdC60YbQuNGOINGB0LvQsNC50LTQtdGA0LBcbiAgICB0aGlzLl90b2dnbGVTbGlkZXIoKTtcblxuICAgIC8vICDQodC+0LHRi9GC0LjRj1xuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG4gIFxuXG4gIF90b2dnbGVTbGlkZXIoKSB7XG4gICAgLy8gINCj0LTQsNC70Y/QtdC8INCw0LrRgtC40LLQvdGL0Lkg0LrQu9Cw0YHRgSDRgyDQstGB0LXRhSDRgdGB0YvQu9C+0LpcbiAgICBmb3IobGV0IGogPSAwOyBqIDwgdGhpcy5uYXZJdGVtLmxlbmd0aDsgaisrKSB7XG4gICAgICB0aGlzLm5hdkl0ZW1bal0uY2hpbGRyZW5bMF0uY2xhc3NMaXN0LnJlbW92ZSgndGhpcmQtc2VjdGlvbi1uYXZfX2xpbmstLWFjdGl2ZScpO1xuICAgIH1cbiAgICAvLyAg0KHQvNC10YnQsNC10Lwg0YHQu9Cw0LnQtNGLXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMubGVmdFNsaWRlckl0ZW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMubGVmdFNsaWRlckl0ZW1baV0uc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0aGlzLmNvdW50ICUgdGhpcy5sZWZ0U2xpZGVySXRlbS5sZW5ndGggKiAtMTAwfSUpYDtcbiAgICAgIHRoaXMucmlnaHRTbGlkZXJJdGVtW2ldLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dGhpcy5jb3VudCAlIHRoaXMubGVmdFNsaWRlckl0ZW0ubGVuZ3RoICogMTAwfSUpYDtcbiAgICAgIHRoaXMubmF2SXRlbVt0aGlzLmNvdW50XS5jaGlsZHJlblswXS5jbGFzc0xpc3QuYWRkKCd0aGlyZC1zZWN0aW9uLW5hdl9fbGluay0tYWN0aXZlJyk7XG4gICAgfVxuICB9XG5cbiAgX2V2ZW50cygpIHtcblxuICAgIC8vICDQn9C10YDQtdC80LXRidC10L3QuNC1INGB0LvQsNC50LTQsCDQv9C+INC60LvQuNC60YMg0LLQv9C10YDQtdC0XG4gICAgdGhpcy5idG5OZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaWYodGhpcy5jb3VudCA8IHRoaXMubGVmdFNsaWRlckl0ZW0ubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgIHRoaXMuX3RvZ2dsZVNsaWRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gINCf0LXRgNC10LzQtdGJ0LXQvdC40LUg0YHQu9Cw0LnQtNCwINC/0L4g0LrQu9C40LrRgyDQvdCw0LfQsNC0XG4gICAgdGhpcy5idG5QcmV2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaWYodGhpcy5jb3VudCA+IDApIHtcbiAgICAgICAgdGhpcy5jb3VudC0tO1xuICAgICAgICB0aGlzLl90b2dnbGVTbGlkZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vICDQn9C10YDQtdC80LXRidC10L3QuNC1INC/0L4g0YHQu9Cw0LnQtNC10YDRgyDQutC90L7Qv9C60LDQvNC4INC80LXQvdGOXG4gICAgdGhpcy5uYXZMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICBpZihlLnRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMubmF2SXRlbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmKGUudGFyZ2V0LnBhcmVudE5vZGUgPT09IHRoaXMubmF2SXRlbVtpXSkge1xuICAgICAgICAgICAgdGhpcy5jb3VudCA9IGk7XG4gICAgICAgICAgICB0aGlzLl90b2dnbGVTbGlkZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cbiAgIl19
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//  Конструктор слайдер фоновых изображений на главной странице
var SliderTop = function () {
  function SliderTop() {
    _classCallCheck(this, SliderTop);

    //  Переменные
    this.sliderList = document.querySelector('.slider__list');
    this.blockCount = document.querySelector('.first-section__count');
    this.count = 0;
    this.timeChangeBackground = 5000;
    this.imgArr = ['img/Photo-1.png', 'img/Photo-2.png', 'img/Photo-3.png', 'img/Photo-4.jpg'];

    //  Переменные svg
    this.line = document.querySelector('.svg circle');
    this.text = document.querySelector('.svg text');
    this.radius = this.line.getAttribute('r');
    this.lineLength = 2 * this.radius * Math.PI;

    //  Создаем динамически элементы списка (слайдера)
    this._createElementsSlider();

    //  Выбираем все созданные элементы
    this.sliderItem = document.querySelectorAll('.slider__item');

    //  Даем первому слайдеру opacity 1
    this.sliderItem[0].style.opacity = '1';

    //  Даем счетчик после загрузки страницы
    this._count();

    // Запускаем прогресс бар разбитый на 300 частей
    this._progress(300);

    //  Запускаем бэкграунд слайдер
    this._slideInterval();
  }

  _createClass(SliderTop, [{
    key: '_createElementsSlider',
    value: function _createElementsSlider() {
      for (var i = 0; i < this.imgArr.length; i++) {
        this.sliderItemCr = document.createElement('li');
        this.sliderItemCr.classList.add('slider__item');
        this.sliderItemCr.style.background = '#fff url(' + this.imgArr[i] + ') no-repeat center center';
        this.sliderItemCr.style.backgroundSize = 'cover';
        this.sliderList.appendChild(this.sliderItemCr);
      };
    }
  }, {
    key: '_count',


    //  функция вывода счетчика на страницу
    value: function _count() {
      this.text.innerHTML = '<tspan>' + (this.count % this.sliderItem.length + 1) + '</tspan>/' + this.sliderItem.length;
    }

    //  функция заполнение круга прогресс бара

  }, {
    key: '_progress',
    value: function _progress(parts) {
      var _this = this;

      this.line.setAttribute('stroke-dashoffset', '' + this.lineLength / 4);

      var _loop = function _loop(i) {
        setTimeout(function () {
          _this.line.setAttribute('stroke-dasharray', _this.lineLength / parts * i + ' ' + (_this.lineLength - _this.lineLength / parts * i));
        }, _this.timeChangeBackground / parts * i);
      };

      for (var i = 0; i <= parts; i++) {
        _loop(i);
      }
    }

    //  Интервал вывода счетчика на страницу

  }, {
    key: '_slideInterval',
    value: function _slideInterval(sec) {
      var _this2 = this;

      setInterval(function () {
        _this2._progress(300);
        _this2.sliderItem[_this2.count % _this2.sliderItem.length].style.opacity = '0';

        _this2.count++;

        _this2.sliderItem[_this2.count % _this2.sliderItem.length].style.opacity = '1';

        _this2._count();
      }, this.timeChangeBackground);
    }
  }]);

  return SliderTop;
}();

exports.default = SliderTop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNsaWRlckJnLmpzIl0sIm5hbWVzIjpbIlNsaWRlclRvcCIsInNsaWRlckxpc3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJibG9ja0NvdW50IiwiY291bnQiLCJ0aW1lQ2hhbmdlQmFja2dyb3VuZCIsImltZ0FyciIsImxpbmUiLCJ0ZXh0IiwicmFkaXVzIiwiZ2V0QXR0cmlidXRlIiwibGluZUxlbmd0aCIsIk1hdGgiLCJQSSIsIl9jcmVhdGVFbGVtZW50c1NsaWRlciIsInNsaWRlckl0ZW0iLCJxdWVyeVNlbGVjdG9yQWxsIiwic3R5bGUiLCJvcGFjaXR5IiwiX2NvdW50IiwiX3Byb2dyZXNzIiwiX3NsaWRlSW50ZXJ2YWwiLCJpIiwibGVuZ3RoIiwic2xpZGVySXRlbUNyIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImJhY2tncm91bmQiLCJiYWNrZ3JvdW5kU2l6ZSIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwicGFydHMiLCJzZXRBdHRyaWJ1dGUiLCJzZXRUaW1lb3V0Iiwic2VjIiwic2V0SW50ZXJ2YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBRTtJQUNtQkEsUztBQUVuQix1QkFBYztBQUFBOztBQUNaO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkMsU0FBU0MsYUFBVCxDQUF1QixlQUF2QixDQUFsQjtBQUNBLFNBQUtDLFVBQUwsR0FBa0JGLFNBQVNDLGFBQVQsQ0FBdUIsdUJBQXZCLENBQWxCO0FBQ0EsU0FBS0UsS0FBTCxHQUFhLENBQWI7QUFDQSxTQUFLQyxvQkFBTCxHQUE0QixJQUE1QjtBQUNBLFNBQUtDLE1BQUwsR0FBYyxDQUNaLGlCQURZLEVBRVosaUJBRlksRUFHWixpQkFIWSxFQUlaLGlCQUpZLENBQWQ7O0FBT0E7QUFDQSxTQUFLQyxJQUFMLEdBQVlOLFNBQVNDLGFBQVQsQ0FBdUIsYUFBdkIsQ0FBWjtBQUNBLFNBQUtNLElBQUwsR0FBWVAsU0FBU0MsYUFBVCxDQUF1QixXQUF2QixDQUFaO0FBQ0EsU0FBS08sTUFBTCxHQUFjLEtBQUtGLElBQUwsQ0FBVUcsWUFBVixDQUF1QixHQUF2QixDQUFkO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQixJQUFJLEtBQUtGLE1BQVQsR0FBa0JHLEtBQUtDLEVBQXpDOztBQUVBO0FBQ0EsU0FBS0MscUJBQUw7O0FBRUE7QUFDQSxTQUFLQyxVQUFMLEdBQWtCZCxTQUFTZSxnQkFBVCxDQUEwQixlQUExQixDQUFsQjs7QUFFQTtBQUNBLFNBQUtELFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUJFLEtBQW5CLENBQXlCQyxPQUF6QixHQUFtQyxHQUFuQzs7QUFFQTtBQUNBLFNBQUtDLE1BQUw7O0FBRUE7QUFDQSxTQUFLQyxTQUFMLENBQWUsR0FBZjs7QUFFQTtBQUNBLFNBQUtDLGNBQUw7QUFDRDs7Ozs0Q0FFdUI7QUFDdEIsV0FBSSxJQUFJQyxJQUFJLENBQVosRUFBZUEsSUFBSSxLQUFLaEIsTUFBTCxDQUFZaUIsTUFBL0IsRUFBdUNELEdBQXZDLEVBQTRDO0FBQzFDLGFBQUtFLFlBQUwsR0FBb0J2QixTQUFTd0IsYUFBVCxDQUF1QixJQUF2QixDQUFwQjtBQUNBLGFBQUtELFlBQUwsQ0FBa0JFLFNBQWxCLENBQTRCQyxHQUE1QixDQUFnQyxjQUFoQztBQUNBLGFBQUtILFlBQUwsQ0FBa0JQLEtBQWxCLENBQXdCVyxVQUF4QixpQkFBaUQsS0FBS3RCLE1BQUwsQ0FBWWdCLENBQVosQ0FBakQ7QUFDQSxhQUFLRSxZQUFMLENBQWtCUCxLQUFsQixDQUF3QlksY0FBeEIsR0FBeUMsT0FBekM7QUFDQSxhQUFLN0IsVUFBTCxDQUFnQjhCLFdBQWhCLENBQTRCLEtBQUtOLFlBQWpDO0FBQ0Q7QUFDRjs7Ozs7QUFFRDs2QkFDUztBQUNQLFdBQUtoQixJQUFMLENBQVV1QixTQUFWLGdCQUFrQyxLQUFLM0IsS0FBTCxHQUFhLEtBQUtXLFVBQUwsQ0FBZ0JRLE1BQTlCLEdBQXdDLENBQXpFLGtCQUFzRixLQUFLUixVQUFMLENBQWdCUSxNQUF0RztBQUNEOztBQUVEOzs7OzhCQUNVUyxLLEVBQU87QUFBQTs7QUFDZixXQUFLekIsSUFBTCxDQUFVMEIsWUFBVixDQUF1QixtQkFBdkIsT0FBK0MsS0FBS3RCLFVBQUwsR0FBa0IsQ0FBakU7O0FBRGUsaUNBRVBXLENBRk87QUFHYlksbUJBQVcsWUFBTTtBQUNmLGdCQUFLM0IsSUFBTCxDQUFVMEIsWUFBVixDQUF1QixrQkFBdkIsRUFBOEMsTUFBS3RCLFVBQUwsR0FBa0JxQixLQUFsQixHQUEwQlYsQ0FBeEUsVUFBNkUsTUFBS1gsVUFBTCxHQUFrQixNQUFLQSxVQUFMLEdBQWtCcUIsS0FBbEIsR0FBMEJWLENBQXpIO0FBQ0QsU0FGRCxFQUVHLE1BQUtqQixvQkFBTCxHQUE0QjJCLEtBQTVCLEdBQW9DVixDQUZ2QztBQUhhOztBQUVmLFdBQUksSUFBSUEsSUFBSSxDQUFaLEVBQWVBLEtBQUtVLEtBQXBCLEVBQTJCVixHQUEzQixFQUFnQztBQUFBLGNBQXhCQSxDQUF3QjtBQUkvQjtBQUNGOztBQUVEOzs7O21DQUNlYSxHLEVBQUs7QUFBQTs7QUFDbEJDLGtCQUFhLFlBQU07QUFDakIsZUFBS2hCLFNBQUwsQ0FBZSxHQUFmO0FBQ0EsZUFBS0wsVUFBTCxDQUFnQixPQUFLWCxLQUFMLEdBQWEsT0FBS1csVUFBTCxDQUFnQlEsTUFBN0MsRUFBcUROLEtBQXJELENBQTJEQyxPQUEzRDs7QUFFQSxlQUFLZCxLQUFMOztBQUVBLGVBQUtXLFVBQUwsQ0FBZ0IsT0FBS1gsS0FBTCxHQUFhLE9BQUtXLFVBQUwsQ0FBZ0JRLE1BQTdDLEVBQXFETixLQUFyRCxDQUEyREMsT0FBM0Q7O0FBRUEsZUFBS0MsTUFBTDtBQUNELE9BVEQsRUFTRyxLQUFLZCxvQkFUUjtBQVVEOzs7Ozs7a0JBN0VrQk4sUyIsImZpbGUiOiJzbGlkZXJCZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiAgLy8gINCa0L7QvdGB0YLRgNGD0LrRgtC+0YAg0YHQu9Cw0LnQtNC10YAg0YTQvtC90L7QstGL0YUg0LjQt9C+0LHRgNCw0LbQtdC90LjQuSDQvdCwINCz0LvQsNCy0L3QvtC5INGB0YLRgNCw0L3QuNGG0LVcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlclRvcCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gINCf0LXRgNC10LzQtdC90L3Ri9C1XG4gICAgdGhpcy5zbGlkZXJMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fbGlzdCcpO1xuICAgIHRoaXMuYmxvY2tDb3VudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maXJzdC1zZWN0aW9uX19jb3VudCcpO1xuICAgIHRoaXMuY291bnQgPSAwO1xuICAgIHRoaXMudGltZUNoYW5nZUJhY2tncm91bmQgPSA1MDAwO1xuICAgIHRoaXMuaW1nQXJyID0gW1xuICAgICAgJ2ltZy9QaG90by0xLnBuZycsXG4gICAgICAnaW1nL1Bob3RvLTIucG5nJyxcbiAgICAgICdpbWcvUGhvdG8tMy5wbmcnLFxuICAgICAgJ2ltZy9QaG90by00LmpwZycsXG4gICAgXTsgICAgXG5cbiAgICAvLyAg0J/QtdGA0LXQvNC10L3QvdGL0LUgc3ZnXG4gICAgdGhpcy5saW5lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN2ZyBjaXJjbGUnKTtcbiAgICB0aGlzLnRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3ZnIHRleHQnKTtcbiAgICB0aGlzLnJhZGl1cyA9IHRoaXMubGluZS5nZXRBdHRyaWJ1dGUoJ3InKTtcbiAgICB0aGlzLmxpbmVMZW5ndGggPSAyICogdGhpcy5yYWRpdXMgKiBNYXRoLlBJOyAgICBcblxuICAgIC8vICDQodC+0LfQtNCw0LXQvCDQtNC40L3QsNC80LjRh9C10YHQutC4INGN0LvQtdC80LXQvdGC0Ysg0YHQv9C40YHQutCwICjRgdC70LDQudC00LXRgNCwKVxuICAgIHRoaXMuX2NyZWF0ZUVsZW1lbnRzU2xpZGVyKCk7XG5cbiAgICAvLyAg0JLRi9Cx0LjRgNCw0LXQvCDQstGB0LUg0YHQvtC30LTQsNC90L3Ri9C1INGN0LvQtdC80LXQvdGC0YtcbiAgICB0aGlzLnNsaWRlckl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyX19pdGVtJyk7XG5cbiAgICAvLyAg0JTQsNC10Lwg0L/QtdGA0LLQvtC80YMg0YHQu9Cw0LnQtNC10YDRgyBvcGFjaXR5IDFcbiAgICB0aGlzLnNsaWRlckl0ZW1bMF0uc3R5bGUub3BhY2l0eSA9ICcxJztcblxuICAgIC8vICDQlNCw0LXQvCDRgdGH0LXRgtGH0LjQuiDQv9C+0YHQu9C1INC30LDQs9GA0YPQt9C60Lgg0YHRgtGA0LDQvdC40YbRi1xuICAgIHRoaXMuX2NvdW50KCk7XG5cbiAgICAvLyDQl9Cw0L/Rg9GB0LrQsNC10Lwg0L/RgNC+0LPRgNC10YHRgSDQsdCw0YAg0YDQsNC30LHQuNGC0YvQuSDQvdCwIDMwMCDRh9Cw0YHRgtC10LlcbiAgICB0aGlzLl9wcm9ncmVzcygzMDApO1xuXG4gICAgLy8gINCX0LDQv9GD0YHQutCw0LXQvCDQsdGN0LrQs9GA0LDRg9C90LQg0YHQu9Cw0LnQtNC10YBcbiAgICB0aGlzLl9zbGlkZUludGVydmFsKCk7XG4gIH1cbiAgXG4gIF9jcmVhdGVFbGVtZW50c1NsaWRlcigpIHtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5pbWdBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc2xpZGVySXRlbUNyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgIHRoaXMuc2xpZGVySXRlbUNyLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9faXRlbScpO1xuICAgICAgdGhpcy5zbGlkZXJJdGVtQ3Iuc3R5bGUuYmFja2dyb3VuZCA9IGAjZmZmIHVybCgke3RoaXMuaW1nQXJyW2ldfSkgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXJgO1xuICAgICAgdGhpcy5zbGlkZXJJdGVtQ3Iuc3R5bGUuYmFja2dyb3VuZFNpemUgPSAnY292ZXInO1xuICAgICAgdGhpcy5zbGlkZXJMaXN0LmFwcGVuZENoaWxkKHRoaXMuc2xpZGVySXRlbUNyKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vICDRhNGD0L3QutGG0LjRjyDQstGL0LLQvtC00LAg0YHRh9C10YLRh9C40LrQsCDQvdCwINGB0YLRgNCw0L3QuNGG0YNcbiAgX2NvdW50KCkge1xuICAgIHRoaXMudGV4dC5pbm5lckhUTUwgPSAoYDx0c3Bhbj4keyh0aGlzLmNvdW50ICUgdGhpcy5zbGlkZXJJdGVtLmxlbmd0aCkgKyAxfTwvdHNwYW4+LyR7dGhpcy5zbGlkZXJJdGVtLmxlbmd0aH1gKTtcbiAgfSAgXG5cbiAgLy8gINGE0YPQvdC60YbQuNGPINC30LDQv9C+0LvQvdC10L3QuNC1INC60YDRg9Cz0LAg0L/RgNC+0LPRgNC10YHRgSDQsdCw0YDQsFxuICBfcHJvZ3Jlc3MocGFydHMpIHtcbiAgICB0aGlzLmxpbmUuc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaG9mZnNldCcsIGAke3RoaXMubGluZUxlbmd0aCAvIDR9YCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8PSBwYXJ0czsgaSsrKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5saW5lLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsIGAke3RoaXMubGluZUxlbmd0aCAvIHBhcnRzICogaX0gJHt0aGlzLmxpbmVMZW5ndGggLSB0aGlzLmxpbmVMZW5ndGggLyBwYXJ0cyAqIGl9YCk7XG4gICAgICB9LCB0aGlzLnRpbWVDaGFuZ2VCYWNrZ3JvdW5kIC8gcGFydHMgKiBpKTtcbiAgICB9XG4gIH1cblxuICAvLyAg0JjQvdGC0LXRgNCy0LDQuyDQstGL0LLQvtC00LAg0YHRh9C10YLRh9C40LrQsCDQvdCwINGB0YLRgNCw0L3QuNGG0YNcbiAgX3NsaWRlSW50ZXJ2YWwoc2VjKSB7XG4gICAgc2V0SW50ZXJ2YWwoICgpID0+IHtcbiAgICAgIHRoaXMuX3Byb2dyZXNzKDMwMCk7XG4gICAgICB0aGlzLnNsaWRlckl0ZW1bdGhpcy5jb3VudCAlIHRoaXMuc2xpZGVySXRlbS5sZW5ndGhdLnN0eWxlLm9wYWNpdHkgPSBgMGA7XG5cbiAgICAgIHRoaXMuY291bnQrKztcblxuICAgICAgdGhpcy5zbGlkZXJJdGVtW3RoaXMuY291bnQgJSB0aGlzLnNsaWRlckl0ZW0ubGVuZ3RoXS5zdHlsZS5vcGFjaXR5ID0gYDFgO1xuXG4gICAgICB0aGlzLl9jb3VudCgpO1xuICAgIH0sIHRoaXMudGltZUNoYW5nZUJhY2tncm91bmQpO1xuICB9O1xufSJdfQ==
},{}],6:[function(require,module,exports){
'use strict';

var _btnSearch = require('./components/btnSearch');

var _btnSearch2 = _interopRequireDefault(_btnSearch);

var _forms = require('./components/forms');

var _forms2 = _interopRequireDefault(_forms);

var _menu = require('./components/menu');

var _menu2 = _interopRequireDefault(_menu);

var _secondSlider = require('./components/secondSlider');

var _secondSlider2 = _interopRequireDefault(_secondSlider);

var _sliderBg = require('./components/sliderBg');

var _sliderBg2 = _interopRequireDefault(_sliderBg);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('DOMContentLoaded', init);

window.addEventListener('load', preloader);

// Preloader
function preloader() {
  var preloader = document.querySelector('.preloader');

  preloader.classList.add('preloader--hide');
}

//  Import classes from components


//  Main function
function init() {
  var btnSearch = new _btnSearch2.default();
  var form = new _forms2.default();
  var menu = new _menu2.default();
  var sliderSecond = new _secondSlider2.default();
  var sliderTop = new _sliderBg2.default();
}

// //  main function
// function init() {
//
//   //  background slider with count on the first slider
//   const sliderTop = new SliderTop();
//
//   //  button for the show input search
//   const btnSearch = new BtnSearch();
//
//   //  button for the open menu on small size screen
//   const menu = new Menu();
//
//   //  slider on the third section
//   const sliderSecond = new SliderSecond();
//
//   //  forms
//   const form = new Form();
// };
//
//
//
// class SliderTop {
//
//   constructor() {
//     //  Переменные
//     this.sliderList = document.querySelector('.slider__list');
//     this.blockCount = document.querySelector('.first-section__count');
//     this.count = 0;
//     this.timeChangeBackground = 5000;
//     this.imgArr = [
//       'img/Photo-1.png',
//       'img/Photo-2.png',
//       'img/Photo-3.png',
//       'img/Photo-4.jpg',
//     ];
//
//     //  Переменные svg
//     this.line = document.querySelector('.svg circle');
//     this.text = document.querySelector('.svg text');
//     this.radius = this.line.getAttribute('r');
//     this.lineLength = 2 * this.radius * Math.PI;
//
//     //  Создаем динамически элементы списка (слайдера)
//     this._createElementsSlider();
//
//     //  Выбираем все созданные элементы
//     this.sliderItem = document.querySelectorAll('.slider__item');
//
//     //  Даем первому слайдеру opacity 1
//     this.sliderItem[0].style.opacity = '1';
//
//     //  Даем счетчик после загрузки страницы
//     this._count();
//
//     // Запускаем прогресс бар разбитый на 300 частей
//     this._progress(120);
//
//     //  Запускаем бэкграунд слайдер
//     this._slideInterval();
//   }
//
//   _createElementsSlider() {
//     for(let i = 0; i < this.imgArr.length; i++) {
//       this.sliderItemCr = document.createElement('li');
//       this.sliderItemCr.classList.add('slider__item');
//       this.sliderItemCr.style.background = `#fff url(${this.imgArr[i]}) no-repeat center center`;
//       this.sliderItemCr.style.backgroundSize = 'cover';
//       this.sliderList.appendChild(this.sliderItemCr);
//     };
//   };
//
//
//   //  функция вывода счетчика на страницу
//   _count() {
//     this.text.innerHTML = (`<tspan>${(this.count % this.sliderItem.length) + 1}</tspan>/${this.sliderItem.length}`);
//   }
//
//   //  функция заполнение круга прогресс бара
//   _progress(parts) {
//     this.line.setAttribute('stroke-dashoffset', `${this.lineLength / 4}`);
//     for(let i = 0; i <= parts; i++) {
//       setTimeout(() => {
//         this.line.setAttribute('stroke-dasharray', `${this.lineLength / parts * i} ${this.lineLength - this.lineLength / parts * i}`);
//       }, this.timeChangeBackground / parts * i);
//     }
//   }
//
//   //  Интервал вывода счетчика на страницу
//   _slideInterval(sec) {
//     setInterval( () => {
//       this._progress(120);
//       this.sliderItem[this.count % this.sliderItem.length].style.opacity = `0`;
//
//       this.count++;
//
//       this.sliderItem[this.count % this.sliderItem.length].style.opacity = `1`;
//
//       this._count();
//     }, this.timeChangeBackground);
//   };
// }
//
// class BtnSearch {
//
//   constructor() {
//     // values DOM
//     this.btnSearch = document.querySelector('.search__icon');
//     this.inputSearch = document.querySelector('.search__input');
//
//     // events
//     this._events();
//   }
//
//   _events() {
//
//     //  show search input
//     this.btnSearch.addEventListener('click', () => {
//       this.inputSearch.classList.toggle('search__input--show');
//       this.inputSearch.focus();
//     });
//
//     //  usage search input
//     this.inputSearch.addEventListener('keydown', e => {
//       if(e.keyCode === 13) {
//         this.inputSearch.classList.toggle('search__input--show');
//         alert(this.inputSearch.value);
//         this.inputSearch.value = '';
//       }
//       else if(e.keyCode === 27) {
//         this.inputSearch.classList.toggle('search__input--show');
//         this.inputSearch.value = '';
//       }
//       else if(!e.target) {
//         this.inputSearch.classList.toggle('search__input--show');
//       }
//     });
//
//     document.body.addEventListener('click', e => {
//       if(e.target !== this.inputSearch && e.target !== this.btnSearch && this.inputSearch.classList.contains('search__input--show')) {
//         this.inputSearch.classList.remove('search__input--show');
//       }
//     })
//
//   }
// }
//
// class Menu {
//
//   constructor() {
//
//     // values DOM
//     this.menuBtn = document.querySelector('.nav__btn');
//     this.menuList = document.querySelector('.nav__list');
//     this.overlay = document.querySelector('.overlay');
//
//     //  events
//     this._events();
//   }
//
//   _events() {
//     // Открытие меню по клику на кнопку меню
//     this.menuBtn.addEventListener('click', () => {
//       this.menuList.classList.add('nav__list--show');
//       this.overlay.classList.add('overlay--show');
//     });
//
//     // Скрытие меню и оверфлоу по клику на оверфлоу
//     this.overlay.addEventListener('click', () => {
//       this.menuList.classList.remove('nav__list--show');
//       this.overlay.classList.remove('overlay--show');
//     });
//
//     // Скрытие меню и оверфлоу по клику на пункт меню
//     this.menuList.addEventListener('click', e => {
//       if(e.target.tagName === 'A' && e.target.classList.contains('nav__link--trs')) {
//         this.menuList.classList.remove('nav__list--show');
//         this.overlay.classList.remove('overlay--show');
//       };
//       if(e.target.tagName === 'A' && (e.target.classList.contains('nav__link--sign-in') || e.target.classList.contains('nav__link--sign-up'))) {
//         this.menuList.classList.remove('nav__list--show');
//       };
//
//     });
//   };
// };
//
// class SliderSecond {
//
//   constructor() {
//     // values
//     this.btnPrev = document.querySelector('.slider-left__btn');
//     this.btnNext = document.querySelector('.slider-right__btn');
//     this.leftSliderItem = document.querySelectorAll('.slider-left__item');
//     this.rightSliderItem = document.querySelectorAll('.slider-right__item');
//     this.navList = document.querySelector('.third-section-nav__list');
//     this.navItem = document.querySelectorAll('.third-section-nav__item');
//     this.count = 0;
//
//     //  Запускаем функцию слайдера
//     this._toggleSlider();
//
//     //  События
//     this._events();
//   }
//
//
//   _toggleSlider() {
//     //  Удаляем активный класс у всех ссылок
//     for(let j = 0; j < this.navItem.length; j++) {
//       this.navItem[j].children[0].classList.remove('third-section-nav__link--active');
//     }
//     //  Смещаем слайды
//     for(let i = 0; i < this.leftSliderItem.length; i++) {
//       this.leftSliderItem[i].style.transform = `translateX(${this.count % this.leftSliderItem.length * -100}%)`;
//       this.rightSliderItem[i].style.transform = `translateX(${this.count % this.leftSliderItem.length * 100}%)`;
//       this.navItem[this.count].children[0].classList.add('third-section-nav__link--active');
//     }
//   }
//
//   _events() {
//
//     //  Перемещение слайда по клику вперед
//     this.btnNext.addEventListener('click', () => {
//       if(this.count < this.leftSliderItem.length - 1) {
//         this.count++;
//         this._toggleSlider();
//       }
//     });
//
//     //  Перемещение слайда по клику назад
//     this.btnPrev.addEventListener('click', () => {
//       if(this.count > 0) {
//         this.count--;
//         this._toggleSlider();
//       }
//     });
//
//     //  Перемещение по слайдеру кнопками меню
//     this.navList.addEventListener('click', e => {
//       if(e.target.tagName === 'A') {
//         event.preventDefault();
//         for(let i = 0; i < this.navItem.length; i++) {
//           if(e.target.parentNode === this.navItem[i]) {
//             this.count = i;
//             this._toggleSlider();
//           }
//         }
//       }
//     });
//   };
// }
//
// class Form {
//
//   constructor() {
//     this.btnSignIn = document.querySelector('.btn--sign-in');
//     this.navLinkSignIn = document.querySelector('.nav__link--sign-in');
//     this.formSignIn = document.querySelector('.form--sign-in');
//     this.btnSignUp = document.querySelector('.btn--sign-up');
//     this.navLinkSignUp = document.querySelector('.nav__link--sign-up');
//     this.formSignUp = document.querySelector('.form--sign-up');
//     this.input = document.querySelectorAll('.input');
//     this.inputText = document.querySelectorAll('.input-text');
//     this.overlay = document.querySelector('.overlay');
//
//
//     this._events();
//   }
//
//
//   _events() {
//       this.btnSignIn.addEventListener('click', () => {
//         this.formSignIn.classList.add('form--sign-in-show');
//         this.overlay.classList.add('overlay--show');
//       });
//
//       this.navLinkSignIn.addEventListener('click', () => {
//         this.formSignIn.classList.add('form--sign-in-show');
//         this.overlay.classList.add('overlay--show');
//       });
//
//       this.btnSignUp.addEventListener('click', () => {
//         this.formSignUp.classList.add('form--sign-up-show');
//         this.overlay.classList.add('overlay--show');
//       });
//
//       this.navLinkSignUp.addEventListener('click', () => {
//         this.formSignUp.classList.add('form--sign-up-show');
//         this.overlay.classList.add('overlay--show');
//       });
//
//
//     this.overlay.addEventListener('click', () => {
//       if(this.formSignIn.classList.contains('form--sign-in-show')) {
//         this.formSignIn.classList.remove('form--sign-in-show');
//       };
//       if(this.formSignUp.classList.contains('form--sign-up-show')) {
//         this.formSignUp.classList.remove('form--sign-up-show');
//       };
//     });
//
//     for(let i = 0; i < this.input.length; i++) {
//       //  Если поле в фокусе, плейсхолдер уходит вверх
//       this.input[i].addEventListener('focus', () => {
//         this.inputText[i].classList.add('login-text--full');
//       });
//
//       //  Если поле пустое, плейсхолдер возвращается обратно
//       this.input[i].addEventListener('blur', () => {
//         if(this.input[i].value === "") {
//           this.inputText[i].classList.remove('login-text--full');
//         }
//       });
//
//     }
//
//   }
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./components/btnSearch":1,"./components/forms":2,"./components/menu":3,"./components/secondSlider":4,"./components/sliderBg":5}]},{},[6])
//# sourceMappingURL=data:application/json;base64,
